from typing import Any

import numpy as np

import roman_datamodels.stnode._mixins
import roman_datamodels.stnode._tagged
from roman_datamodels.stnode._tagged import TaggedObjectNode as TaggedObjectNode

class Guidewindow(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def pedestal_frames(self) -> Any: ...
    @property
    def signal_frames(self) -> Any: ...
    @property
    def amp33(self) -> Any: ...

class Ramp(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...
    @property
    def pixeldq(self) -> np.ndarray: ...
    @property
    def groupdq(self) -> np.ndarray: ...
    @property
    def err(self) -> np.ndarray: ...
    @property
    def amp33(self) -> np.ndarray: ...
    @property
    def border_ref_pix_left(self) -> np.ndarray: ...
    @property
    def border_ref_pix_right(self) -> np.ndarray: ...
    @property
    def border_ref_pix_top(self) -> np.ndarray: ...
    @property
    def border_ref_pix_bottom(self) -> np.ndarray: ...
    @property
    def dq_border_ref_pix_left(self) -> np.ndarray: ...
    @property
    def dq_border_ref_pix_right(self) -> np.ndarray: ...
    @property
    def dq_border_ref_pix_top(self) -> np.ndarray: ...
    @property
    def dq_border_ref_pix_bottom(self) -> np.ndarray: ...

class RampFitOutput(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def slope(self) -> np.ndarray: ...
    @property
    def sigslope(self) -> np.ndarray: ...
    @property
    def yint(self) -> np.ndarray: ...
    @property
    def sigyint(self) -> np.ndarray: ...
    @property
    def pedestal(self) -> np.ndarray: ...
    @property
    def weights(self) -> np.ndarray: ...
    @property
    def crmag(self) -> np.ndarray: ...
    @property
    def var_poisson(self) -> np.ndarray: ...
    @property
    def var_rnoise(self) -> np.ndarray: ...

class WfiScienceRaw(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...
    @property
    def amp33(self) -> np.ndarray: ...
    @property
    def resultantdq(self) -> np.ndarray: ...

class WfiImage(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...
    @property
    def dq(self) -> np.ndarray: ...
    @property
    def err(self) -> np.ndarray: ...
    @property
    def var_poisson(self) -> np.ndarray: ...
    @property
    def var_rnoise(self) -> np.ndarray: ...
    @property
    def var_flat(self) -> np.ndarray: ...
    @property
    def amp33(self) -> np.ndarray: ...
    @property
    def border_ref_pix_left(self) -> np.ndarray: ...
    @property
    def border_ref_pix_right(self) -> np.ndarray: ...
    @property
    def border_ref_pix_top(self) -> np.ndarray: ...
    @property
    def border_ref_pix_bottom(self) -> np.ndarray: ...
    @property
    def dq_border_ref_pix_left(self) -> np.ndarray: ...
    @property
    def dq_border_ref_pix_right(self) -> np.ndarray: ...
    @property
    def dq_border_ref_pix_top(self) -> np.ndarray: ...
    @property
    def dq_border_ref_pix_bottom(self) -> np.ndarray: ...
    @property
    def cal_logs(self) -> Any: ...

class WfiMosaic(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...
    @property
    def err(self) -> np.ndarray: ...
    @property
    def context(self) -> np.ndarray: ...
    @property
    def weight(self) -> np.ndarray: ...
    @property
    def var_poisson(self) -> np.ndarray: ...
    @property
    def var_rnoise(self) -> np.ndarray: ...
    @property
    def var_flat(self) -> np.ndarray: ...
    @property
    def cal_logs(self) -> Any: ...

class WfiMode(roman_datamodels.stnode._mixins.WfiModeMixin, roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def name(self) -> str: ...
    @property
    def detector(self) -> Any: ...
    @property
    def optical_element(self) -> Any: ...

class Exposure(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def type(self) -> Any: ...
    @property
    def start_time(self) -> Any: ...
    @property
    def ngroups(self) -> int: ...
    @property
    def nframes(self) -> int: ...
    @property
    def data_problem(self) -> bool: ...
    @property
    def frame_divisor(self) -> int: ...
    @property
    def groupgap(self) -> int: ...
    @property
    def frame_time(self) -> float: ...
    @property
    def group_time(self) -> float: ...
    @property
    def exposure_time(self) -> float: ...
    @property
    def ma_table_name(self) -> str: ...
    @property
    def ma_table_number(self) -> int: ...
    @property
    def read_pattern(self) -> list: ...
    @property
    def id(self) -> int: ...
    @property
    def mid_time(self) -> Any: ...
    @property
    def end_time(self) -> Any: ...
    @property
    def start_time_mjd(self) -> float: ...
    @property
    def mid_time_mjd(self) -> float: ...
    @property
    def end_time_mjd(self) -> float: ...
    @property
    def start_time_tdb(self) -> float: ...
    @property
    def mid_time_tdb(self) -> float: ...
    @property
    def end_time_tdb(self) -> float: ...
    @property
    def sca_number(self) -> int: ...
    @property
    def gain_factor(self) -> float: ...
    @property
    def integration_time(self) -> float: ...
    @property
    def elapsed_exposure_time(self) -> float: ...
    @property
    def effective_exposure_time(self) -> float: ...
    @property
    def duration(self) -> float: ...
    @property
    def level0_compressed(self) -> bool: ...
    @property
    def truncated(self) -> bool: ...

class Program(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def title(self) -> str: ...
    @property
    def pi_name(self) -> str: ...
    @property
    def category(self) -> str: ...
    @property
    def subcategory(self) -> str: ...
    @property
    def science_category(self) -> str: ...
    @property
    def continuation_id(self) -> int: ...

class Observation(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def obs_id(self) -> str: ...
    @property
    def visit_id(self) -> str: ...
    @property
    def program(self) -> str: ...
    @property
    def execution_plan(self) -> int: ...
    @property
    def segment(self) -> int: ...
    @property
    def observation(self) -> int: ...
    @property
    def visit(self) -> int: ...
    @property
    def visit_file_group(self) -> int: ...
    @property
    def visit_file_sequence(self) -> int: ...
    @property
    def visit_file_activity(self) -> str: ...
    @property
    def exposure(self) -> int: ...
    @property
    def template(self) -> str: ...
    @property
    def observation_label(self) -> str: ...
    @property
    def survey(self) -> str: ...

class Ephemeris(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def earth_angle(self) -> float: ...
    @property
    def moon_angle(self) -> float: ...
    @property
    def ephemeris_reference_frame(self) -> str: ...
    @property
    def sun_angle(self) -> float: ...
    @property
    def type(self) -> str: ...
    @property
    def time(self) -> float: ...
    @property
    def spatial_x(self) -> float: ...
    @property
    def spatial_y(self) -> float: ...
    @property
    def spatial_z(self) -> float: ...
    @property
    def velocity_x(self) -> float: ...
    @property
    def velocity_y(self) -> float: ...
    @property
    def velocity_z(self) -> float: ...

class Visit(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def engineering_quality(self) -> str: ...
    @property
    def pointing_engdb_quality(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def start_time(self) -> Any: ...
    @property
    def end_time(self) -> Any: ...
    @property
    def status(self) -> str: ...
    @property
    def total_exposures(self) -> int: ...
    @property
    def internal_target(self) -> bool: ...
    @property
    def target_of_opportunity(self) -> bool: ...

class Photometry(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def conversion_megajanskys(self) -> Any: ...
    @property
    def conversion_microjanskys(self) -> Any: ...
    @property
    def pixelarea_steradians(self) -> Any: ...
    @property
    def pixelarea_arcsecsq(self) -> Any: ...
    @property
    def conversion_megajanskys_uncertainty(self) -> Any: ...
    @property
    def conversion_microjanskys_uncertainty(self) -> Any: ...

class SourceDetection(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def tweakreg_catalog_name(self) -> str: ...

class Coordinates(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def reference_frame(self) -> str: ...

class Aperture(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def name(self) -> str: ...
    @property
    def position_angle(self) -> float: ...

class Pointing(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def ra_v1(self) -> float: ...
    @property
    def dec_v1(self) -> float: ...
    @property
    def pa_v3(self) -> float: ...

class Target(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def proposer_name(self) -> str: ...
    @property
    def catalog_name(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def ra(self) -> float: ...
    @property
    def dec(self) -> float: ...
    @property
    def ra_uncertainty(self) -> float: ...
    @property
    def dec_uncertainty(self) -> float: ...
    @property
    def proper_motion_ra(self) -> float: ...
    @property
    def proper_motion_dec(self) -> float: ...
    @property
    def proper_motion_epoch(self) -> str: ...
    @property
    def proposer_ra(self) -> float: ...
    @property
    def proposer_dec(self) -> float: ...
    @property
    def source_type(self) -> str: ...

class VelocityAberration(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def ra_offset(self) -> float: ...
    @property
    def dec_offset(self) -> float: ...
    @property
    def scale_factor(self) -> float: ...

class Wcsinfo(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def v2_ref(self) -> float: ...
    @property
    def v3_ref(self) -> float: ...
    @property
    def vparity(self) -> int: ...
    @property
    def v3yangle(self) -> float: ...
    @property
    def ra_ref(self) -> float: ...
    @property
    def dec_ref(self) -> float: ...
    @property
    def roll_ref(self) -> float: ...
    @property
    def s_region(self) -> str: ...

class Guidestar(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def gw_id(self) -> str: ...
    @property
    def gw_fgs_mode(self) -> Any: ...
    @property
    def data_start(self) -> float: ...
    @property
    def data_end(self) -> float: ...
    @property
    def gw_window_xstart(self) -> int: ...
    @property
    def gw_window_ystart(self) -> int: ...
    @property
    def gw_window_xstop(self) -> int: ...
    @property
    def gw_window_ystop(self) -> int: ...
    @property
    def gw_window_xsize(self) -> int: ...
    @property
    def gw_window_ysize(self) -> int: ...
    @property
    def gs_id(self) -> str: ...
    @property
    def gs_catalog_version(self) -> str: ...
    @property
    def gs_ra(self) -> float: ...
    @property
    def gs_dec(self) -> float: ...
    @property
    def gs_ura(self) -> float: ...
    @property
    def gs_udec(self) -> float: ...
    @property
    def gs_mag(self) -> float: ...
    @property
    def gs_umag(self) -> float: ...
    @property
    def gs_ctd_x(self) -> float: ...
    @property
    def gs_ctd_y(self) -> float: ...
    @property
    def gs_ctd_ux(self) -> float: ...
    @property
    def gs_ctd_uy(self) -> float: ...
    @property
    def gs_epoch(self) -> str: ...
    @property
    def gs_mura(self) -> float: ...
    @property
    def gs_mudec(self) -> float: ...
    @property
    def gs_para(self) -> float: ...
    @property
    def gs_pattern_error(self) -> float: ...

class L2CalStep(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def assign_wcs(self) -> str: ...
    @property
    def flat_field(self) -> str: ...
    @property
    def dark(self) -> str: ...
    @property
    def dq_init(self) -> str: ...
    @property
    def flux(self) -> str: ...
    @property
    def jump(self) -> str: ...
    @property
    def linearity(self) -> str: ...
    @property
    def photom(self) -> str: ...
    @property
    def source_detection(self) -> str: ...
    @property
    def ramp_fit(self) -> str: ...
    @property
    def refpix(self) -> str: ...
    @property
    def saturation(self) -> str: ...
    @property
    def outlier_detection(self) -> str: ...
    @property
    def tweakreg(self) -> str: ...
    @property
    def skymatch(self) -> str: ...

class L3CalStep(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def flux(self) -> str: ...
    @property
    def outlier_detection(self) -> str: ...
    @property
    def skymatch(self) -> str: ...
    @property
    def resample(self) -> str: ...

class OutlierDetection(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def good_bits(self) -> str: ...

class SkyBackground(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def level(self) -> Any: ...
    @property
    def method(self) -> str: ...
    @property
    def subtracted(self) -> bool: ...

class Resample(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def good_bits(self) -> str: ...
    @property
    def pixel_scale_ratio(self) -> float: ...
    @property
    def pixfrac(self) -> float: ...
    @property
    def pointings(self) -> int: ...
    @property
    def product_exposure_time(self) -> float: ...
    @property
    def members(self) -> list: ...
    @property
    def weight_type(self) -> str: ...

class IndividualImageMeta(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def basic(self) -> Any: ...
    @property
    def aperture(self) -> Any: ...
    @property
    def cal_step(self) -> Any: ...
    @property
    def coordinates(self) -> Any: ...
    @property
    def ephemeris(self) -> Any: ...
    @property
    def exposure(self) -> Any: ...
    @property
    def guidestar(self) -> Any: ...
    @property
    def instrument(self) -> Any: ...
    @property
    def observation(self) -> Any: ...
    @property
    def photometry(self) -> Any: ...
    @property
    def pointing(self) -> Any: ...
    @property
    def program(self) -> Any: ...
    @property
    def ref_file(self) -> Any: ...
    @property
    def target(self) -> Any: ...
    @property
    def velocity_aberration(self) -> Any: ...
    @property
    def visit(self) -> Any: ...
    @property
    def wcsinfo(self) -> Any: ...

class MosaicBasic(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def time_first_mjd(self) -> float: ...
    @property
    def time_last_mjd(self) -> float: ...
    @property
    def time_mean_mjd(self) -> float: ...
    @property
    def max_exposure_time(self) -> float: ...
    @property
    def mean_exposure_time(self) -> float: ...
    @property
    def visit(self) -> int: ...
    @property
    def segment(self) -> int: ...
    @property
    def program(self) -> str: ...
    @property
    def survey(self) -> str: ...
    @property
    def optical_element(self) -> Any: ...
    @property
    def instrument(self) -> str: ...
    @property
    def location_name(self) -> str: ...
    @property
    def product_type(self) -> str: ...

class MosaicAssociations(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def pool_name(self) -> str: ...
    @property
    def table_name(self) -> str: ...

class MosaicWcsinfo(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def ra_ref(self) -> float: ...
    @property
    def dec_ref(self) -> float: ...
    @property
    def x_ref(self) -> float: ...
    @property
    def y_ref(self) -> float: ...
    @property
    def rotation_matrix(self) -> list: ...
    @property
    def pixel_scale(self) -> float: ...
    @property
    def pixel_scale_local(self) -> float: ...
    @property
    def projection(self) -> str: ...
    @property
    def s_region(self) -> str: ...
    @property
    def pixel_shape(self) -> list: ...
    @property
    def ra_center(self) -> float: ...
    @property
    def dec_center(self) -> float: ...
    @property
    def ra_corn1(self) -> float: ...
    @property
    def dec_corn1(self) -> float: ...
    @property
    def ra_corn2(self) -> float: ...
    @property
    def dec_corn2(self) -> float: ...
    @property
    def ra_corn3(self) -> float: ...
    @property
    def dec_corn3(self) -> float: ...
    @property
    def ra_corn4(self) -> float: ...
    @property
    def dec_corn4(self) -> float: ...
    @property
    def orientat_local(self) -> float: ...
    @property
    def orientat(self) -> float: ...

class AbvegaoffsetRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> dict: ...

class ApcorrRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> dict: ...

class DarkRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> Any: ...
    @property
    def dq(self) -> np.ndarray: ...
    @property
    def dark_slope(self) -> Any: ...
    @property
    def dark_slope_error(self) -> Any: ...

class DistortionRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def coordinate_distortion_transform(self) -> dict: ...

class EpsfRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def psf(self) -> np.ndarray: ...
    @property
    def extended_psf(self) -> np.ndarray: ...

class FlatRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...
    @property
    def dq(self) -> np.ndarray: ...
    @property
    def err(self) -> np.ndarray: ...

class GainRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> Any: ...

class InverselinearityRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def coeffs(self) -> np.ndarray: ...
    @property
    def dq(self) -> np.ndarray: ...

class IpcRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...

class LinearityRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def coeffs(self) -> np.ndarray: ...
    @property
    def dq(self) -> np.ndarray: ...

class MaskRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def dq(self) -> np.ndarray: ...

class PixelareaRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...

class ReadnoiseRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> Any: ...

class RefpixRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def gamma(self) -> np.ndarray: ...
    @property
    def zeta(self) -> np.ndarray: ...
    @property
    def alpha(self) -> np.ndarray: ...

class SaturationRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> Any: ...
    @property
    def dq(self) -> np.ndarray: ...

class SuperbiasRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...
    @property
    def dq(self) -> np.ndarray: ...
    @property
    def err(self) -> np.ndarray: ...

class WfiImgPhotomRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def phot_table(self) -> dict: ...

class Associations(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def asn_id(self) -> str: ...
    @property
    def asn_pool(self) -> str: ...
    @property
    def asn_type(self) -> str: ...
    @property
    def asn_rule(self) -> str: ...
    @property
    def version_id(self) -> str: ...
    @property
    def code_version(self) -> str: ...
    @property
    def degraded_status(self) -> str: ...
    @property
    def program(self) -> int: ...
    @property
    def target(self) -> int: ...
    @property
    def constraints(self) -> str: ...
    @property
    def products(self) -> list: ...

class RefFile(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def crds(self) -> dict: ...
    @property
    def refpix(self) -> str: ...
    @property
    def dark(self) -> str: ...
    @property
    def distortion(self) -> str: ...
    @property
    def mask(self) -> str: ...
    @property
    def flat(self) -> str: ...
    @property
    def gain(self) -> str: ...
    @property
    def readnoise(self) -> str: ...
    @property
    def linearity(self) -> str: ...
    @property
    def photom(self) -> str: ...
    @property
    def area(self) -> str: ...
    @property
    def saturation(self) -> str: ...

class SourceCatalog(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def source_catalog(self) -> Any: ...

class SegmentationMap(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...

class MosaicSourceCatalog(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def source_catalog(self) -> Any: ...

class MosaicSegmentationMap(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> np.ndarray: ...

class Fps(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> Any: ...
    @property
    def amp33(self) -> Any: ...
    @property
    def amp33_reset_reads(self) -> Any: ...
    @property
    def amp33_reference_read(self) -> Any: ...
    @property
    def guidewindow(self) -> Any: ...
    @property
    def reference_read(self) -> Any: ...
    @property
    def reset_reads(self) -> Any: ...

class FpsCalStep(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def assign_wcs(self) -> str: ...
    @property
    def flat_field(self) -> str: ...
    @property
    def dark(self) -> str: ...
    @property
    def dq_init(self) -> str: ...
    @property
    def flux(self) -> str: ...
    @property
    def jump(self) -> str: ...
    @property
    def linearity(self) -> str: ...
    @property
    def photom(self) -> str: ...
    @property
    def source_detection(self) -> str: ...
    @property
    def ramp_fit(self) -> str: ...
    @property
    def refpix(self) -> str: ...
    @property
    def saturation(self) -> str: ...
    @property
    def outlier_detection(self) -> str: ...
    @property
    def tweakreg(self) -> str: ...
    @property
    def skymatch(self) -> str: ...

class FpsExposure(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def type(self) -> Any: ...
    @property
    def start_time(self) -> Any: ...
    @property
    def ngroups(self) -> int: ...
    @property
    def nframes(self) -> int: ...
    @property
    def data_problem(self) -> bool: ...
    @property
    def frame_divisor(self) -> int: ...
    @property
    def groupgap(self) -> int: ...
    @property
    def frame_time(self) -> float: ...
    @property
    def group_time(self) -> float: ...
    @property
    def exposure_time(self) -> float: ...
    @property
    def ma_table_name(self) -> str: ...
    @property
    def ma_table_number(self) -> int: ...
    @property
    def read_pattern(self) -> list: ...

class FpsGroundtest(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def test_name(self) -> str: ...
    @property
    def test_phase(self) -> str: ...
    @property
    def test_environment(self) -> str: ...
    @property
    def test_script(self) -> str: ...
    @property
    def product_date(self) -> Any: ...
    @property
    def product_version(self) -> str: ...
    @property
    def conversion_date(self) -> Any: ...
    @property
    def conversion_version(self) -> str: ...
    @property
    def filename_pnt5(self) -> str: ...
    @property
    def filepath_level_pnt5(self) -> str: ...
    @property
    def filename_l1a(self) -> str: ...
    @property
    def detector_id(self) -> str: ...
    @property
    def detector_temp(self) -> float: ...
    @property
    def frames_temp(self) -> np.ndarray: ...
    @property
    def ota_temp(self) -> float: ...
    @property
    def rcs_on(self) -> bool: ...
    @property
    def readout_col_num(self) -> int: ...
    @property
    def detector_pixel_size(self) -> Any: ...
    @property
    def sensor_error(self) -> np.ndarray: ...

class FpsGuidestar(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def gw_id(self) -> str: ...
    @property
    def gw_fgs_mode(self) -> Any: ...
    @property
    def data_start(self) -> float: ...
    @property
    def data_end(self) -> float: ...
    @property
    def gw_window_xstart(self) -> int: ...
    @property
    def gw_window_ystart(self) -> int: ...
    @property
    def gw_window_xstop(self) -> int: ...
    @property
    def gw_window_ystop(self) -> int: ...
    @property
    def gw_window_xsize(self) -> int: ...
    @property
    def gw_window_ysize(self) -> int: ...

class FpsStatistics(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def mean_counts_per_sec(self) -> Any: ...
    @property
    def median_counts_per_sec(self) -> Any: ...
    @property
    def max_counts(self) -> Any: ...
    @property
    def min_counts(self) -> Any: ...

class FpsRefFile(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def crds(self) -> dict: ...
    @property
    def dark(self) -> str: ...
    @property
    def distortion(self) -> str: ...
    @property
    def mask(self) -> str: ...
    @property
    def flat(self) -> str: ...
    @property
    def gain(self) -> str: ...
    @property
    def readnoise(self) -> str: ...
    @property
    def linearity(self) -> str: ...
    @property
    def photom(self) -> str: ...
    @property
    def area(self) -> str: ...
    @property
    def saturation(self) -> str: ...

class FpsWfiMode(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def name(self) -> str: ...
    @property
    def detector(self) -> Any: ...
    @property
    def optical_element(self) -> Any: ...

class Tvac(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> Any: ...
    @property
    def amp33(self) -> Any: ...
    @property
    def amp33_reset_reads(self) -> Any: ...
    @property
    def amp33_reference_read(self) -> Any: ...
    @property
    def guidewindow(self) -> Any: ...
    @property
    def reference_read(self) -> Any: ...
    @property
    def reset_reads(self) -> Any: ...

class TvacCalStep(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def assign_wcs(self) -> str: ...
    @property
    def flat_field(self) -> str: ...
    @property
    def dark(self) -> str: ...
    @property
    def dq_init(self) -> str: ...
    @property
    def flux(self) -> str: ...
    @property
    def jump(self) -> str: ...
    @property
    def linearity(self) -> str: ...
    @property
    def photom(self) -> str: ...
    @property
    def source_detection(self) -> str: ...
    @property
    def ramp_fit(self) -> str: ...
    @property
    def refpix(self) -> str: ...
    @property
    def saturation(self) -> str: ...
    @property
    def outlier_detection(self) -> str: ...
    @property
    def tweakreg(self) -> str: ...
    @property
    def skymatch(self) -> str: ...

class TvacExposure(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def type(self) -> Any: ...
    @property
    def start_time(self) -> Any: ...
    @property
    def ngroups(self) -> int: ...
    @property
    def nframes(self) -> int: ...
    @property
    def data_problem(self) -> bool: ...
    @property
    def frame_divisor(self) -> int: ...
    @property
    def groupgap(self) -> int: ...
    @property
    def frame_time(self) -> float: ...
    @property
    def group_time(self) -> float: ...
    @property
    def exposure_time(self) -> float: ...
    @property
    def ma_table_name(self) -> str: ...
    @property
    def ma_table_number(self) -> int: ...
    @property
    def read_pattern(self) -> list: ...

class TvacGroundtest(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def test_name(self) -> str: ...
    @property
    def test_phase(self) -> str: ...
    @property
    def test_environment(self) -> str: ...
    @property
    def test_script(self) -> str: ...
    @property
    def product_date(self) -> Any: ...
    @property
    def product_version(self) -> str: ...
    @property
    def conversion_date(self) -> Any: ...
    @property
    def conversion_version(self) -> str: ...
    @property
    def filename_pnt5(self) -> str: ...
    @property
    def filepath_level_pnt5(self) -> str: ...
    @property
    def filename_l1a(self) -> str: ...
    @property
    def detector_id(self) -> str: ...
    @property
    def detector_temp(self) -> float: ...
    @property
    def frames_temp(self) -> np.ndarray: ...
    @property
    def ota_temp(self) -> float: ...
    @property
    def rcs_on(self) -> bool: ...
    @property
    def readout_col_num(self) -> int: ...
    @property
    def detector_pixel_size(self) -> Any: ...
    @property
    def sensor_error(self) -> np.ndarray: ...
    @property
    def activity_number(self) -> int: ...
    @property
    def led_bank1_band_number_on(self) -> list: ...
    @property
    def led_bank2_bank1_number_on(self) -> list: ...
    @property
    def led_bank1_approx_wlen(self) -> Any: ...
    @property
    def led_bank2_approx_wlen(self) -> Any: ...
    @property
    def srcs_pd_voltage(self) -> float: ...
    @property
    def srcs_led_flux(self) -> float: ...
    @property
    def wfi_mce_srcs_bank1_led_i(self) -> Any: ...
    @property
    def wfi_mce_srcs_bank1_led_range(self) -> str: ...
    @property
    def wfi_mce_srcs_bank2_led_i(self) -> Any: ...
    @property
    def wfi_mce_srcs_bank2_led_range(self) -> str: ...
    @property
    def srcs_led_current(self) -> float: ...
    @property
    def wfi_opt_targettype(self) -> str: ...
    @property
    def analysis_tag(self) -> str: ...
    @property
    def gsorc_pose_mode(self) -> str: ...
    @property
    def gsorc_pose_target(self) -> str: ...
    @property
    def gsorc_sds_active_atten(self) -> float: ...
    @property
    def gsorc_sds_lltfir_wave(self) -> float: ...
    @property
    def gsorc_sds_sorc_on(self) -> bool: ...
    @property
    def gsorc_sds_sorc_wlen(self) -> float: ...
    @property
    def gsorc_sds_active_source(self) -> str: ...
    @property
    def gsorc_sds_dq_pulse(self) -> str: ...
    @property
    def gsorc_sds_daq_pw(self) -> Any: ...
    @property
    def gsorc_heater1_setpt(self) -> float: ...
    @property
    def wfi_otp_wfi_ewa(self) -> str: ...
    @property
    def sca_temp(self) -> Any: ...
    @property
    def mpa_temp(self) -> Any: ...
    @property
    def ewa_temp(self) -> Any: ...
    @property
    def ewta_outer_heater_temp(self) -> Any: ...
    @property
    def ewta_inner_heater_temp(self) -> Any: ...
    @property
    def coba_temp_near_ewta(self) -> Any: ...
    @property
    def scea_temp(self) -> Any: ...
    @property
    def wfi_sce_1_vbiasgate_v(self) -> Any: ...
    @property
    def wfi_sce_1_vbiaspwr_i(self) -> Any: ...
    @property
    def wfi_sce_1_vbiaspwr_v(self) -> Any: ...
    @property
    def wfi_sce_1_vreset_v(self) -> Any: ...
    @property
    def wfi_sce_1_vreset_i(self) -> Any: ...
    @property
    def wfi_mcu_a_offs_csense_fpssen(self) -> Any: ...

class TvacGuidestar(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def gw_id(self) -> str: ...
    @property
    def gw_fgs_mode(self) -> Any: ...
    @property
    def data_start(self) -> float: ...
    @property
    def data_end(self) -> float: ...
    @property
    def gw_window_xstart(self) -> int: ...
    @property
    def gw_window_ystart(self) -> int: ...
    @property
    def gw_window_xstop(self) -> int: ...
    @property
    def gw_window_ystop(self) -> int: ...
    @property
    def gw_window_xsize(self) -> int: ...
    @property
    def gw_window_ysize(self) -> int: ...

class TvacStatistics(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def mean_counts_per_sec(self) -> Any: ...
    @property
    def median_counts_per_sec(self) -> Any: ...
    @property
    def max_counts(self) -> Any: ...
    @property
    def min_counts(self) -> Any: ...

class TvacRefFile(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def crds(self) -> dict: ...
    @property
    def dark(self) -> str: ...
    @property
    def distortion(self) -> str: ...
    @property
    def mask(self) -> str: ...
    @property
    def flat(self) -> str: ...
    @property
    def gain(self) -> str: ...
    @property
    def readnoise(self) -> str: ...
    @property
    def linearity(self) -> str: ...
    @property
    def photom(self) -> str: ...
    @property
    def area(self) -> str: ...
    @property
    def saturation(self) -> str: ...

class TvacWfiMode(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def name(self) -> str: ...
    @property
    def detector(self) -> Any: ...
    @property
    def optical_element(self) -> Any: ...

class MsosStack(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @property
    def data(self) -> Any: ...
    @property
    def uncertainty(self) -> Any: ...
    @property
    def mask(self) -> Any: ...
    @property
    def coverage(self) -> Any: ...
