from __future__ import annotations

from typing import Any

import astropy.time.core
import numpy as np

import roman_datamodels.stnode._mixins
import roman_datamodels.stnode._tagged
from roman_datamodels.stnode._tagged import TaggedListNode as TaggedListNode
from roman_datamodels.stnode._tagged import TaggedObjectNode as TaggedObjectNode
from roman_datamodels.stnode._tagged import TaggedScalarNode as TaggedScalarNode

class Guidewindow(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def pedestal_frames(self) -> Any: ...
    @pedestal_frames.setter
    def pedestal_frames(self, value: Any) -> None: ...
    @property
    def signal_frames(self) -> Any: ...
    @signal_frames.setter
    def signal_frames(self, value: Any) -> None: ...
    @property
    def amp33(self) -> Any: ...
    @amp33.setter
    def amp33(self, value: Any) -> None: ...

class Ramp(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...
    @property
    def pixeldq(self) -> np.ndarray: ...
    @pixeldq.setter
    def pixeldq(self, value: np.ndarray) -> None: ...
    @property
    def groupdq(self) -> np.ndarray: ...
    @groupdq.setter
    def groupdq(self, value: np.ndarray) -> None: ...
    @property
    def err(self) -> np.ndarray: ...
    @err.setter
    def err(self, value: np.ndarray) -> None: ...
    @property
    def amp33(self) -> np.ndarray: ...
    @amp33.setter
    def amp33(self, value: np.ndarray) -> None: ...
    @property
    def border_ref_pix_left(self) -> np.ndarray: ...
    @border_ref_pix_left.setter
    def border_ref_pix_left(self, value: np.ndarray) -> None: ...
    @property
    def border_ref_pix_right(self) -> np.ndarray: ...
    @border_ref_pix_right.setter
    def border_ref_pix_right(self, value: np.ndarray) -> None: ...
    @property
    def border_ref_pix_top(self) -> np.ndarray: ...
    @border_ref_pix_top.setter
    def border_ref_pix_top(self, value: np.ndarray) -> None: ...
    @property
    def border_ref_pix_bottom(self) -> np.ndarray: ...
    @border_ref_pix_bottom.setter
    def border_ref_pix_bottom(self, value: np.ndarray) -> None: ...
    @property
    def dq_border_ref_pix_left(self) -> np.ndarray: ...
    @dq_border_ref_pix_left.setter
    def dq_border_ref_pix_left(self, value: np.ndarray) -> None: ...
    @property
    def dq_border_ref_pix_right(self) -> np.ndarray: ...
    @dq_border_ref_pix_right.setter
    def dq_border_ref_pix_right(self, value: np.ndarray) -> None: ...
    @property
    def dq_border_ref_pix_top(self) -> np.ndarray: ...
    @dq_border_ref_pix_top.setter
    def dq_border_ref_pix_top(self, value: np.ndarray) -> None: ...
    @property
    def dq_border_ref_pix_bottom(self) -> np.ndarray: ...
    @dq_border_ref_pix_bottom.setter
    def dq_border_ref_pix_bottom(self, value: np.ndarray) -> None: ...

class RampFitOutput(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def slope(self) -> np.ndarray: ...
    @slope.setter
    def slope(self, value: np.ndarray) -> None: ...
    @property
    def sigslope(self) -> np.ndarray: ...
    @sigslope.setter
    def sigslope(self, value: np.ndarray) -> None: ...
    @property
    def yint(self) -> np.ndarray: ...
    @yint.setter
    def yint(self, value: np.ndarray) -> None: ...
    @property
    def sigyint(self) -> np.ndarray: ...
    @sigyint.setter
    def sigyint(self, value: np.ndarray) -> None: ...
    @property
    def pedestal(self) -> np.ndarray: ...
    @pedestal.setter
    def pedestal(self, value: np.ndarray) -> None: ...
    @property
    def weights(self) -> np.ndarray: ...
    @weights.setter
    def weights(self, value: np.ndarray) -> None: ...
    @property
    def crmag(self) -> np.ndarray: ...
    @crmag.setter
    def crmag(self, value: np.ndarray) -> None: ...
    @property
    def var_poisson(self) -> np.ndarray: ...
    @var_poisson.setter
    def var_poisson(self, value: np.ndarray) -> None: ...
    @property
    def var_rnoise(self) -> np.ndarray: ...
    @var_rnoise.setter
    def var_rnoise(self, value: np.ndarray) -> None: ...

class WfiScienceRaw(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...
    @property
    def amp33(self) -> np.ndarray: ...
    @amp33.setter
    def amp33(self, value: np.ndarray) -> None: ...
    @property
    def resultantdq(self) -> np.ndarray: ...
    @resultantdq.setter
    def resultantdq(self, value: np.ndarray) -> None: ...

class WfiImage(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...
    @property
    def dq(self) -> np.ndarray: ...
    @dq.setter
    def dq(self, value: np.ndarray) -> None: ...
    @property
    def err(self) -> np.ndarray: ...
    @err.setter
    def err(self, value: np.ndarray) -> None: ...
    @property
    def var_poisson(self) -> np.ndarray: ...
    @var_poisson.setter
    def var_poisson(self, value: np.ndarray) -> None: ...
    @property
    def var_rnoise(self) -> np.ndarray: ...
    @var_rnoise.setter
    def var_rnoise(self, value: np.ndarray) -> None: ...
    @property
    def var_flat(self) -> np.ndarray: ...
    @var_flat.setter
    def var_flat(self, value: np.ndarray) -> None: ...
    @property
    def amp33(self) -> np.ndarray: ...
    @amp33.setter
    def amp33(self, value: np.ndarray) -> None: ...
    @property
    def border_ref_pix_left(self) -> np.ndarray: ...
    @border_ref_pix_left.setter
    def border_ref_pix_left(self, value: np.ndarray) -> None: ...
    @property
    def border_ref_pix_right(self) -> np.ndarray: ...
    @border_ref_pix_right.setter
    def border_ref_pix_right(self, value: np.ndarray) -> None: ...
    @property
    def border_ref_pix_top(self) -> np.ndarray: ...
    @border_ref_pix_top.setter
    def border_ref_pix_top(self, value: np.ndarray) -> None: ...
    @property
    def border_ref_pix_bottom(self) -> np.ndarray: ...
    @border_ref_pix_bottom.setter
    def border_ref_pix_bottom(self, value: np.ndarray) -> None: ...
    @property
    def dq_border_ref_pix_left(self) -> np.ndarray: ...
    @dq_border_ref_pix_left.setter
    def dq_border_ref_pix_left(self, value: np.ndarray) -> None: ...
    @property
    def dq_border_ref_pix_right(self) -> np.ndarray: ...
    @dq_border_ref_pix_right.setter
    def dq_border_ref_pix_right(self, value: np.ndarray) -> None: ...
    @property
    def dq_border_ref_pix_top(self) -> np.ndarray: ...
    @dq_border_ref_pix_top.setter
    def dq_border_ref_pix_top(self, value: np.ndarray) -> None: ...
    @property
    def dq_border_ref_pix_bottom(self) -> np.ndarray: ...
    @dq_border_ref_pix_bottom.setter
    def dq_border_ref_pix_bottom(self, value: np.ndarray) -> None: ...
    @property
    def cal_logs(self) -> CalLogs: ...
    @cal_logs.setter
    def cal_logs(self, value: CalLogs) -> None: ...

class WfiMosaic(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...
    @property
    def err(self) -> np.ndarray: ...
    @err.setter
    def err(self, value: np.ndarray) -> None: ...
    @property
    def context(self) -> np.ndarray: ...
    @context.setter
    def context(self, value: np.ndarray) -> None: ...
    @property
    def weight(self) -> np.ndarray: ...
    @weight.setter
    def weight(self, value: np.ndarray) -> None: ...
    @property
    def var_poisson(self) -> np.ndarray: ...
    @var_poisson.setter
    def var_poisson(self, value: np.ndarray) -> None: ...
    @property
    def var_rnoise(self) -> np.ndarray: ...
    @var_rnoise.setter
    def var_rnoise(self, value: np.ndarray) -> None: ...
    @property
    def var_flat(self) -> np.ndarray: ...
    @var_flat.setter
    def var_flat(self, value: np.ndarray) -> None: ...
    @property
    def cal_logs(self) -> CalLogs: ...
    @cal_logs.setter
    def cal_logs(self, value: CalLogs) -> None: ...

class WfiMode(roman_datamodels.stnode._mixins.WfiModeMixin, roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def detector(self) -> Any: ...
    @detector.setter
    def detector(self, value: Any) -> None: ...
    @property
    def optical_element(self) -> Any: ...
    @optical_element.setter
    def optical_element(self, value: Any) -> None: ...

class Exposure(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def type(self) -> Any: ...
    @type.setter
    def type(self, value: Any) -> None: ...
    @property
    def start_time(self) -> astropy.time.core.Time: ...
    @start_time.setter
    def start_time(self, value: astropy.time.core.Time) -> None: ...
    @property
    def ngroups(self) -> int: ...
    @ngroups.setter
    def ngroups(self, value: int) -> None: ...
    @property
    def nframes(self) -> int: ...
    @nframes.setter
    def nframes(self, value: int) -> None: ...
    @property
    def data_problem(self) -> bool: ...
    @data_problem.setter
    def data_problem(self, value: bool) -> None: ...
    @property
    def frame_divisor(self) -> int: ...
    @frame_divisor.setter
    def frame_divisor(self, value: int) -> None: ...
    @property
    def groupgap(self) -> int: ...
    @groupgap.setter
    def groupgap(self, value: int) -> None: ...
    @property
    def frame_time(self) -> float: ...
    @frame_time.setter
    def frame_time(self, value: float) -> None: ...
    @property
    def group_time(self) -> float: ...
    @group_time.setter
    def group_time(self, value: float) -> None: ...
    @property
    def exposure_time(self) -> float: ...
    @exposure_time.setter
    def exposure_time(self, value: float) -> None: ...
    @property
    def ma_table_name(self) -> str: ...
    @ma_table_name.setter
    def ma_table_name(self, value: str) -> None: ...
    @property
    def ma_table_number(self) -> int: ...
    @ma_table_number.setter
    def ma_table_number(self, value: int) -> None: ...
    @property
    def read_pattern(self) -> list: ...
    @read_pattern.setter
    def read_pattern(self, value: list) -> None: ...
    @property
    def id(self) -> int: ...
    @id.setter
    def id(self, value: int) -> None: ...
    @property
    def mid_time(self) -> astropy.time.core.Time: ...
    @mid_time.setter
    def mid_time(self, value: astropy.time.core.Time) -> None: ...
    @property
    def end_time(self) -> astropy.time.core.Time: ...
    @end_time.setter
    def end_time(self, value: astropy.time.core.Time) -> None: ...
    @property
    def start_time_mjd(self) -> float: ...
    @start_time_mjd.setter
    def start_time_mjd(self, value: float) -> None: ...
    @property
    def mid_time_mjd(self) -> float: ...
    @mid_time_mjd.setter
    def mid_time_mjd(self, value: float) -> None: ...
    @property
    def end_time_mjd(self) -> float: ...
    @end_time_mjd.setter
    def end_time_mjd(self, value: float) -> None: ...
    @property
    def start_time_tdb(self) -> float: ...
    @start_time_tdb.setter
    def start_time_tdb(self, value: float) -> None: ...
    @property
    def mid_time_tdb(self) -> float: ...
    @mid_time_tdb.setter
    def mid_time_tdb(self, value: float) -> None: ...
    @property
    def end_time_tdb(self) -> float: ...
    @end_time_tdb.setter
    def end_time_tdb(self, value: float) -> None: ...
    @property
    def sca_number(self) -> int: ...
    @sca_number.setter
    def sca_number(self, value: int) -> None: ...
    @property
    def gain_factor(self) -> float: ...
    @gain_factor.setter
    def gain_factor(self, value: float) -> None: ...
    @property
    def integration_time(self) -> float: ...
    @integration_time.setter
    def integration_time(self, value: float) -> None: ...
    @property
    def elapsed_exposure_time(self) -> float: ...
    @elapsed_exposure_time.setter
    def elapsed_exposure_time(self, value: float) -> None: ...
    @property
    def effective_exposure_time(self) -> float: ...
    @effective_exposure_time.setter
    def effective_exposure_time(self, value: float) -> None: ...
    @property
    def duration(self) -> float: ...
    @duration.setter
    def duration(self, value: float) -> None: ...
    @property
    def level0_compressed(self) -> bool: ...
    @level0_compressed.setter
    def level0_compressed(self, value: bool) -> None: ...
    @property
    def truncated(self) -> bool: ...
    @truncated.setter
    def truncated(self, value: bool) -> None: ...

class Program(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def title(self) -> str: ...
    @title.setter
    def title(self, value: str) -> None: ...
    @property
    def pi_name(self) -> str: ...
    @pi_name.setter
    def pi_name(self, value: str) -> None: ...
    @property
    def category(self) -> str: ...
    @category.setter
    def category(self, value: str) -> None: ...
    @property
    def subcategory(self) -> str: ...
    @subcategory.setter
    def subcategory(self, value: str) -> None: ...
    @property
    def science_category(self) -> str: ...
    @science_category.setter
    def science_category(self, value: str) -> None: ...
    @property
    def continuation_id(self) -> int: ...
    @continuation_id.setter
    def continuation_id(self, value: int) -> None: ...

class Observation(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def obs_id(self) -> str: ...
    @obs_id.setter
    def obs_id(self, value: str) -> None: ...
    @property
    def visit_id(self) -> str: ...
    @visit_id.setter
    def visit_id(self, value: str) -> None: ...
    @property
    def program(self) -> str: ...
    @program.setter
    def program(self, value: str) -> None: ...
    @property
    def execution_plan(self) -> int: ...
    @execution_plan.setter
    def execution_plan(self, value: int) -> None: ...
    @property
    def segment(self) -> int: ...
    @segment.setter
    def segment(self, value: int) -> None: ...
    @property
    def observation(self) -> int: ...
    @observation.setter
    def observation(self, value: int) -> None: ...
    @property
    def visit(self) -> int: ...
    @visit.setter
    def visit(self, value: int) -> None: ...
    @property
    def visit_file_group(self) -> int: ...
    @visit_file_group.setter
    def visit_file_group(self, value: int) -> None: ...
    @property
    def visit_file_sequence(self) -> int: ...
    @visit_file_sequence.setter
    def visit_file_sequence(self, value: int) -> None: ...
    @property
    def visit_file_activity(self) -> str: ...
    @visit_file_activity.setter
    def visit_file_activity(self, value: str) -> None: ...
    @property
    def exposure(self) -> int: ...
    @exposure.setter
    def exposure(self, value: int) -> None: ...
    @property
    def template(self) -> str: ...
    @template.setter
    def template(self, value: str) -> None: ...
    @property
    def observation_label(self) -> str: ...
    @observation_label.setter
    def observation_label(self, value: str) -> None: ...
    @property
    def survey(self) -> str: ...
    @survey.setter
    def survey(self, value: str) -> None: ...

class Ephemeris(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def earth_angle(self) -> float: ...
    @earth_angle.setter
    def earth_angle(self, value: float) -> None: ...
    @property
    def moon_angle(self) -> float: ...
    @moon_angle.setter
    def moon_angle(self, value: float) -> None: ...
    @property
    def ephemeris_reference_frame(self) -> str: ...
    @ephemeris_reference_frame.setter
    def ephemeris_reference_frame(self, value: str) -> None: ...
    @property
    def sun_angle(self) -> float: ...
    @sun_angle.setter
    def sun_angle(self, value: float) -> None: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> None: ...
    @property
    def time(self) -> float: ...
    @time.setter
    def time(self, value: float) -> None: ...
    @property
    def spatial_x(self) -> float: ...
    @spatial_x.setter
    def spatial_x(self, value: float) -> None: ...
    @property
    def spatial_y(self) -> float: ...
    @spatial_y.setter
    def spatial_y(self, value: float) -> None: ...
    @property
    def spatial_z(self) -> float: ...
    @spatial_z.setter
    def spatial_z(self, value: float) -> None: ...
    @property
    def velocity_x(self) -> float: ...
    @velocity_x.setter
    def velocity_x(self, value: float) -> None: ...
    @property
    def velocity_y(self) -> float: ...
    @velocity_y.setter
    def velocity_y(self, value: float) -> None: ...
    @property
    def velocity_z(self) -> float: ...
    @velocity_z.setter
    def velocity_z(self, value: float) -> None: ...

class Visit(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def engineering_quality(self) -> str: ...
    @engineering_quality.setter
    def engineering_quality(self, value: str) -> None: ...
    @property
    def pointing_engdb_quality(self) -> str: ...
    @pointing_engdb_quality.setter
    def pointing_engdb_quality(self, value: str) -> None: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> None: ...
    @property
    def start_time(self) -> astropy.time.core.Time: ...
    @start_time.setter
    def start_time(self, value: astropy.time.core.Time) -> None: ...
    @property
    def end_time(self) -> astropy.time.core.Time: ...
    @end_time.setter
    def end_time(self, value: astropy.time.core.Time) -> None: ...
    @property
    def status(self) -> str: ...
    @status.setter
    def status(self, value: str) -> None: ...
    @property
    def total_exposures(self) -> int: ...
    @total_exposures.setter
    def total_exposures(self, value: int) -> None: ...
    @property
    def internal_target(self) -> bool: ...
    @internal_target.setter
    def internal_target(self, value: bool) -> None: ...
    @property
    def target_of_opportunity(self) -> bool: ...
    @target_of_opportunity.setter
    def target_of_opportunity(self, value: bool) -> None: ...

class Photometry(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def conversion_megajanskys(self) -> Any: ...
    @conversion_megajanskys.setter
    def conversion_megajanskys(self, value: Any) -> None: ...
    @property
    def conversion_microjanskys(self) -> Any: ...
    @conversion_microjanskys.setter
    def conversion_microjanskys(self, value: Any) -> None: ...
    @property
    def pixelarea_steradians(self) -> Any: ...
    @pixelarea_steradians.setter
    def pixelarea_steradians(self, value: Any) -> None: ...
    @property
    def pixelarea_arcsecsq(self) -> Any: ...
    @pixelarea_arcsecsq.setter
    def pixelarea_arcsecsq(self, value: Any) -> None: ...
    @property
    def conversion_megajanskys_uncertainty(self) -> Any: ...
    @conversion_megajanskys_uncertainty.setter
    def conversion_megajanskys_uncertainty(self, value: Any) -> None: ...
    @property
    def conversion_microjanskys_uncertainty(self) -> Any: ...
    @conversion_microjanskys_uncertainty.setter
    def conversion_microjanskys_uncertainty(self, value: Any) -> None: ...

class SourceDetection(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def tweakreg_catalog_name(self) -> str: ...
    @tweakreg_catalog_name.setter
    def tweakreg_catalog_name(self, value: str) -> None: ...

class Coordinates(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def reference_frame(self) -> str: ...
    @reference_frame.setter
    def reference_frame(self, value: str) -> None: ...

class Aperture(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def position_angle(self) -> float: ...
    @position_angle.setter
    def position_angle(self, value: float) -> None: ...

class Pointing(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def ra_v1(self) -> float: ...
    @ra_v1.setter
    def ra_v1(self, value: float) -> None: ...
    @property
    def dec_v1(self) -> float: ...
    @dec_v1.setter
    def dec_v1(self, value: float) -> None: ...
    @property
    def pa_v3(self) -> float: ...
    @pa_v3.setter
    def pa_v3(self, value: float) -> None: ...

class Target(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def proposer_name(self) -> str: ...
    @proposer_name.setter
    def proposer_name(self, value: str) -> None: ...
    @property
    def catalog_name(self) -> str: ...
    @catalog_name.setter
    def catalog_name(self, value: str) -> None: ...
    @property
    def type(self) -> str: ...
    @type.setter
    def type(self, value: str) -> None: ...
    @property
    def ra(self) -> float: ...
    @ra.setter
    def ra(self, value: float) -> None: ...
    @property
    def dec(self) -> float: ...
    @dec.setter
    def dec(self, value: float) -> None: ...
    @property
    def ra_uncertainty(self) -> float: ...
    @ra_uncertainty.setter
    def ra_uncertainty(self, value: float) -> None: ...
    @property
    def dec_uncertainty(self) -> float: ...
    @dec_uncertainty.setter
    def dec_uncertainty(self, value: float) -> None: ...
    @property
    def proper_motion_ra(self) -> float: ...
    @proper_motion_ra.setter
    def proper_motion_ra(self, value: float) -> None: ...
    @property
    def proper_motion_dec(self) -> float: ...
    @proper_motion_dec.setter
    def proper_motion_dec(self, value: float) -> None: ...
    @property
    def proper_motion_epoch(self) -> str: ...
    @proper_motion_epoch.setter
    def proper_motion_epoch(self, value: str) -> None: ...
    @property
    def proposer_ra(self) -> float: ...
    @proposer_ra.setter
    def proposer_ra(self, value: float) -> None: ...
    @property
    def proposer_dec(self) -> float: ...
    @proposer_dec.setter
    def proposer_dec(self, value: float) -> None: ...
    @property
    def source_type(self) -> str: ...
    @source_type.setter
    def source_type(self, value: str) -> None: ...

class VelocityAberration(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def ra_offset(self) -> float: ...
    @ra_offset.setter
    def ra_offset(self, value: float) -> None: ...
    @property
    def dec_offset(self) -> float: ...
    @dec_offset.setter
    def dec_offset(self, value: float) -> None: ...
    @property
    def scale_factor(self) -> float: ...
    @scale_factor.setter
    def scale_factor(self, value: float) -> None: ...

class Wcsinfo(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def v2_ref(self) -> float: ...
    @v2_ref.setter
    def v2_ref(self, value: float) -> None: ...
    @property
    def v3_ref(self) -> float: ...
    @v3_ref.setter
    def v3_ref(self, value: float) -> None: ...
    @property
    def vparity(self) -> int: ...
    @vparity.setter
    def vparity(self, value: int) -> None: ...
    @property
    def v3yangle(self) -> float: ...
    @v3yangle.setter
    def v3yangle(self, value: float) -> None: ...
    @property
    def ra_ref(self) -> float: ...
    @ra_ref.setter
    def ra_ref(self, value: float) -> None: ...
    @property
    def dec_ref(self) -> float: ...
    @dec_ref.setter
    def dec_ref(self, value: float) -> None: ...
    @property
    def roll_ref(self) -> float: ...
    @roll_ref.setter
    def roll_ref(self, value: float) -> None: ...
    @property
    def s_region(self) -> str: ...
    @s_region.setter
    def s_region(self, value: str) -> None: ...

class Guidestar(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def gw_id(self) -> str: ...
    @gw_id.setter
    def gw_id(self, value: str) -> None: ...
    @property
    def gw_fgs_mode(self) -> Any: ...
    @gw_fgs_mode.setter
    def gw_fgs_mode(self, value: Any) -> None: ...
    @property
    def data_start(self) -> float: ...
    @data_start.setter
    def data_start(self, value: float) -> None: ...
    @property
    def data_end(self) -> float: ...
    @data_end.setter
    def data_end(self, value: float) -> None: ...
    @property
    def gw_window_xstart(self) -> int: ...
    @gw_window_xstart.setter
    def gw_window_xstart(self, value: int) -> None: ...
    @property
    def gw_window_ystart(self) -> int: ...
    @gw_window_ystart.setter
    def gw_window_ystart(self, value: int) -> None: ...
    @property
    def gw_window_xstop(self) -> int: ...
    @gw_window_xstop.setter
    def gw_window_xstop(self, value: int) -> None: ...
    @property
    def gw_window_ystop(self) -> int: ...
    @gw_window_ystop.setter
    def gw_window_ystop(self, value: int) -> None: ...
    @property
    def gw_window_xsize(self) -> int: ...
    @gw_window_xsize.setter
    def gw_window_xsize(self, value: int) -> None: ...
    @property
    def gw_window_ysize(self) -> int: ...
    @gw_window_ysize.setter
    def gw_window_ysize(self, value: int) -> None: ...
    @property
    def gs_id(self) -> str: ...
    @gs_id.setter
    def gs_id(self, value: str) -> None: ...
    @property
    def gs_catalog_version(self) -> str: ...
    @gs_catalog_version.setter
    def gs_catalog_version(self, value: str) -> None: ...
    @property
    def gs_ra(self) -> float: ...
    @gs_ra.setter
    def gs_ra(self, value: float) -> None: ...
    @property
    def gs_dec(self) -> float: ...
    @gs_dec.setter
    def gs_dec(self, value: float) -> None: ...
    @property
    def gs_ura(self) -> float: ...
    @gs_ura.setter
    def gs_ura(self, value: float) -> None: ...
    @property
    def gs_udec(self) -> float: ...
    @gs_udec.setter
    def gs_udec(self, value: float) -> None: ...
    @property
    def gs_mag(self) -> float: ...
    @gs_mag.setter
    def gs_mag(self, value: float) -> None: ...
    @property
    def gs_umag(self) -> float: ...
    @gs_umag.setter
    def gs_umag(self, value: float) -> None: ...
    @property
    def gs_ctd_x(self) -> float: ...
    @gs_ctd_x.setter
    def gs_ctd_x(self, value: float) -> None: ...
    @property
    def gs_ctd_y(self) -> float: ...
    @gs_ctd_y.setter
    def gs_ctd_y(self, value: float) -> None: ...
    @property
    def gs_ctd_ux(self) -> float: ...
    @gs_ctd_ux.setter
    def gs_ctd_ux(self, value: float) -> None: ...
    @property
    def gs_ctd_uy(self) -> float: ...
    @gs_ctd_uy.setter
    def gs_ctd_uy(self, value: float) -> None: ...
    @property
    def gs_epoch(self) -> str: ...
    @gs_epoch.setter
    def gs_epoch(self, value: str) -> None: ...
    @property
    def gs_mura(self) -> float: ...
    @gs_mura.setter
    def gs_mura(self, value: float) -> None: ...
    @property
    def gs_mudec(self) -> float: ...
    @gs_mudec.setter
    def gs_mudec(self, value: float) -> None: ...
    @property
    def gs_para(self) -> float: ...
    @gs_para.setter
    def gs_para(self, value: float) -> None: ...
    @property
    def gs_pattern_error(self) -> float: ...
    @gs_pattern_error.setter
    def gs_pattern_error(self, value: float) -> None: ...

class L2CalStep(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def assign_wcs(self) -> str: ...
    @assign_wcs.setter
    def assign_wcs(self, value: str) -> None: ...
    @property
    def flat_field(self) -> str: ...
    @flat_field.setter
    def flat_field(self, value: str) -> None: ...
    @property
    def dark(self) -> str: ...
    @dark.setter
    def dark(self, value: str) -> None: ...
    @property
    def dq_init(self) -> str: ...
    @dq_init.setter
    def dq_init(self, value: str) -> None: ...
    @property
    def flux(self) -> str: ...
    @flux.setter
    def flux(self, value: str) -> None: ...
    @property
    def jump(self) -> str: ...
    @jump.setter
    def jump(self, value: str) -> None: ...
    @property
    def linearity(self) -> str: ...
    @linearity.setter
    def linearity(self, value: str) -> None: ...
    @property
    def photom(self) -> str: ...
    @photom.setter
    def photom(self, value: str) -> None: ...
    @property
    def source_detection(self) -> str: ...
    @source_detection.setter
    def source_detection(self, value: str) -> None: ...
    @property
    def ramp_fit(self) -> str: ...
    @ramp_fit.setter
    def ramp_fit(self, value: str) -> None: ...
    @property
    def refpix(self) -> str: ...
    @refpix.setter
    def refpix(self, value: str) -> None: ...
    @property
    def saturation(self) -> str: ...
    @saturation.setter
    def saturation(self, value: str) -> None: ...
    @property
    def outlier_detection(self) -> str: ...
    @outlier_detection.setter
    def outlier_detection(self, value: str) -> None: ...
    @property
    def tweakreg(self) -> str: ...
    @tweakreg.setter
    def tweakreg(self, value: str) -> None: ...
    @property
    def skymatch(self) -> str: ...
    @skymatch.setter
    def skymatch(self, value: str) -> None: ...

class L3CalStep(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def flux(self) -> str: ...
    @flux.setter
    def flux(self, value: str) -> None: ...
    @property
    def outlier_detection(self) -> str: ...
    @outlier_detection.setter
    def outlier_detection(self, value: str) -> None: ...
    @property
    def skymatch(self) -> str: ...
    @skymatch.setter
    def skymatch(self, value: str) -> None: ...
    @property
    def resample(self) -> str: ...
    @resample.setter
    def resample(self, value: str) -> None: ...

class OutlierDetection(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def good_bits(self) -> str: ...
    @good_bits.setter
    def good_bits(self, value: str) -> None: ...

class SkyBackground(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def level(self) -> Any: ...
    @level.setter
    def level(self, value: Any) -> None: ...
    @property
    def method(self) -> str: ...
    @method.setter
    def method(self, value: str) -> None: ...
    @property
    def subtracted(self) -> bool: ...
    @subtracted.setter
    def subtracted(self, value: bool) -> None: ...

class Resample(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def good_bits(self) -> str: ...
    @good_bits.setter
    def good_bits(self, value: str) -> None: ...
    @property
    def pixel_scale_ratio(self) -> float: ...
    @pixel_scale_ratio.setter
    def pixel_scale_ratio(self, value: float) -> None: ...
    @property
    def pixfrac(self) -> float: ...
    @pixfrac.setter
    def pixfrac(self, value: float) -> None: ...
    @property
    def pointings(self) -> int: ...
    @pointings.setter
    def pointings(self, value: int) -> None: ...
    @property
    def product_exposure_time(self) -> float: ...
    @product_exposure_time.setter
    def product_exposure_time(self, value: float) -> None: ...
    @property
    def members(self) -> list: ...
    @members.setter
    def members(self, value: list) -> None: ...
    @property
    def weight_type(self) -> str: ...
    @weight_type.setter
    def weight_type(self, value: str) -> None: ...

class IndividualImageMeta(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def basic(self) -> Any: ...
    @basic.setter
    def basic(self, value: Any) -> None: ...
    @property
    def aperture(self) -> Any: ...
    @aperture.setter
    def aperture(self, value: Any) -> None: ...
    @property
    def cal_step(self) -> Any: ...
    @cal_step.setter
    def cal_step(self, value: Any) -> None: ...
    @property
    def coordinates(self) -> Any: ...
    @coordinates.setter
    def coordinates(self, value: Any) -> None: ...
    @property
    def ephemeris(self) -> Any: ...
    @ephemeris.setter
    def ephemeris(self, value: Any) -> None: ...
    @property
    def exposure(self) -> Any: ...
    @exposure.setter
    def exposure(self, value: Any) -> None: ...
    @property
    def guidestar(self) -> Any: ...
    @guidestar.setter
    def guidestar(self, value: Any) -> None: ...
    @property
    def instrument(self) -> Any: ...
    @instrument.setter
    def instrument(self, value: Any) -> None: ...
    @property
    def observation(self) -> Any: ...
    @observation.setter
    def observation(self, value: Any) -> None: ...
    @property
    def photometry(self) -> Any: ...
    @photometry.setter
    def photometry(self, value: Any) -> None: ...
    @property
    def pointing(self) -> Any: ...
    @pointing.setter
    def pointing(self, value: Any) -> None: ...
    @property
    def program(self) -> Any: ...
    @program.setter
    def program(self, value: Any) -> None: ...
    @property
    def ref_file(self) -> Any: ...
    @ref_file.setter
    def ref_file(self, value: Any) -> None: ...
    @property
    def target(self) -> Any: ...
    @target.setter
    def target(self, value: Any) -> None: ...
    @property
    def velocity_aberration(self) -> Any: ...
    @velocity_aberration.setter
    def velocity_aberration(self, value: Any) -> None: ...
    @property
    def visit(self) -> Any: ...
    @visit.setter
    def visit(self, value: Any) -> None: ...
    @property
    def wcsinfo(self) -> Any: ...
    @wcsinfo.setter
    def wcsinfo(self, value: Any) -> None: ...

class MosaicBasic(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def time_first_mjd(self) -> float: ...
    @time_first_mjd.setter
    def time_first_mjd(self, value: float) -> None: ...
    @property
    def time_last_mjd(self) -> float: ...
    @time_last_mjd.setter
    def time_last_mjd(self, value: float) -> None: ...
    @property
    def time_mean_mjd(self) -> float: ...
    @time_mean_mjd.setter
    def time_mean_mjd(self, value: float) -> None: ...
    @property
    def max_exposure_time(self) -> float: ...
    @max_exposure_time.setter
    def max_exposure_time(self, value: float) -> None: ...
    @property
    def mean_exposure_time(self) -> float: ...
    @mean_exposure_time.setter
    def mean_exposure_time(self, value: float) -> None: ...
    @property
    def visit(self) -> int: ...
    @visit.setter
    def visit(self, value: int) -> None: ...
    @property
    def segment(self) -> int: ...
    @segment.setter
    def segment(self, value: int) -> None: ...
    @property
    def program(self) -> str: ...
    @program.setter
    def program(self, value: str) -> None: ...
    @property
    def survey(self) -> str: ...
    @survey.setter
    def survey(self, value: str) -> None: ...
    @property
    def optical_element(self) -> Any: ...
    @optical_element.setter
    def optical_element(self, value: Any) -> None: ...
    @property
    def instrument(self) -> str: ...
    @instrument.setter
    def instrument(self, value: str) -> None: ...
    @property
    def location_name(self) -> str: ...
    @location_name.setter
    def location_name(self, value: str) -> None: ...
    @property
    def product_type(self) -> str: ...
    @product_type.setter
    def product_type(self, value: str) -> None: ...

class MosaicAssociations(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def pool_name(self) -> str: ...
    @pool_name.setter
    def pool_name(self, value: str) -> None: ...
    @property
    def table_name(self) -> str: ...
    @table_name.setter
    def table_name(self, value: str) -> None: ...

class MosaicWcsinfo(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def ra_ref(self) -> float: ...
    @ra_ref.setter
    def ra_ref(self, value: float) -> None: ...
    @property
    def dec_ref(self) -> float: ...
    @dec_ref.setter
    def dec_ref(self, value: float) -> None: ...
    @property
    def x_ref(self) -> float: ...
    @x_ref.setter
    def x_ref(self, value: float) -> None: ...
    @property
    def y_ref(self) -> float: ...
    @y_ref.setter
    def y_ref(self, value: float) -> None: ...
    @property
    def rotation_matrix(self) -> list: ...
    @rotation_matrix.setter
    def rotation_matrix(self, value: list) -> None: ...
    @property
    def pixel_scale(self) -> float: ...
    @pixel_scale.setter
    def pixel_scale(self, value: float) -> None: ...
    @property
    def pixel_scale_local(self) -> float: ...
    @pixel_scale_local.setter
    def pixel_scale_local(self, value: float) -> None: ...
    @property
    def projection(self) -> str: ...
    @projection.setter
    def projection(self, value: str) -> None: ...
    @property
    def s_region(self) -> str: ...
    @s_region.setter
    def s_region(self, value: str) -> None: ...
    @property
    def pixel_shape(self) -> list: ...
    @pixel_shape.setter
    def pixel_shape(self, value: list) -> None: ...
    @property
    def ra_center(self) -> float: ...
    @ra_center.setter
    def ra_center(self, value: float) -> None: ...
    @property
    def dec_center(self) -> float: ...
    @dec_center.setter
    def dec_center(self, value: float) -> None: ...
    @property
    def ra_corn1(self) -> float: ...
    @ra_corn1.setter
    def ra_corn1(self, value: float) -> None: ...
    @property
    def dec_corn1(self) -> float: ...
    @dec_corn1.setter
    def dec_corn1(self, value: float) -> None: ...
    @property
    def ra_corn2(self) -> float: ...
    @ra_corn2.setter
    def ra_corn2(self, value: float) -> None: ...
    @property
    def dec_corn2(self) -> float: ...
    @dec_corn2.setter
    def dec_corn2(self, value: float) -> None: ...
    @property
    def ra_corn3(self) -> float: ...
    @ra_corn3.setter
    def ra_corn3(self, value: float) -> None: ...
    @property
    def dec_corn3(self) -> float: ...
    @dec_corn3.setter
    def dec_corn3(self, value: float) -> None: ...
    @property
    def ra_corn4(self) -> float: ...
    @ra_corn4.setter
    def ra_corn4(self, value: float) -> None: ...
    @property
    def dec_corn4(self) -> float: ...
    @dec_corn4.setter
    def dec_corn4(self, value: float) -> None: ...
    @property
    def orientat_local(self) -> float: ...
    @orientat_local.setter
    def orientat_local(self, value: float) -> None: ...
    @property
    def orientat(self) -> float: ...
    @orientat.setter
    def orientat(self, value: float) -> None: ...

class AbvegaoffsetRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> dict: ...
    @data.setter
    def data(self, value: dict) -> None: ...

class ApcorrRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> dict: ...
    @data.setter
    def data(self, value: dict) -> None: ...

class DarkRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> Any: ...
    @data.setter
    def data(self, value: Any) -> None: ...
    @property
    def dq(self) -> np.ndarray: ...
    @dq.setter
    def dq(self, value: np.ndarray) -> None: ...
    @property
    def dark_slope(self) -> Any: ...
    @dark_slope.setter
    def dark_slope(self, value: Any) -> None: ...
    @property
    def dark_slope_error(self) -> Any: ...
    @dark_slope_error.setter
    def dark_slope_error(self, value: Any) -> None: ...

class DistortionRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def coordinate_distortion_transform(self) -> dict: ...
    @coordinate_distortion_transform.setter
    def coordinate_distortion_transform(self, value: dict) -> None: ...

class EpsfRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def psf(self) -> np.ndarray: ...
    @psf.setter
    def psf(self, value: np.ndarray) -> None: ...
    @property
    def extended_psf(self) -> np.ndarray: ...
    @extended_psf.setter
    def extended_psf(self, value: np.ndarray) -> None: ...

class FlatRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...
    @property
    def dq(self) -> np.ndarray: ...
    @dq.setter
    def dq(self, value: np.ndarray) -> None: ...
    @property
    def err(self) -> np.ndarray: ...
    @err.setter
    def err(self, value: np.ndarray) -> None: ...

class GainRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> Any: ...
    @data.setter
    def data(self, value: Any) -> None: ...

class InverselinearityRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def coeffs(self) -> np.ndarray: ...
    @coeffs.setter
    def coeffs(self, value: np.ndarray) -> None: ...
    @property
    def dq(self) -> np.ndarray: ...
    @dq.setter
    def dq(self, value: np.ndarray) -> None: ...

class IpcRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...

class LinearityRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def coeffs(self) -> np.ndarray: ...
    @coeffs.setter
    def coeffs(self, value: np.ndarray) -> None: ...
    @property
    def dq(self) -> np.ndarray: ...
    @dq.setter
    def dq(self, value: np.ndarray) -> None: ...

class MaskRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def dq(self) -> np.ndarray: ...
    @dq.setter
    def dq(self, value: np.ndarray) -> None: ...

class PixelareaRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...

class ReadnoiseRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> Any: ...
    @data.setter
    def data(self, value: Any) -> None: ...

class RefpixRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def gamma(self) -> np.ndarray: ...
    @gamma.setter
    def gamma(self, value: np.ndarray) -> None: ...
    @property
    def zeta(self) -> np.ndarray: ...
    @zeta.setter
    def zeta(self, value: np.ndarray) -> None: ...
    @property
    def alpha(self) -> np.ndarray: ...
    @alpha.setter
    def alpha(self, value: np.ndarray) -> None: ...

class SaturationRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> Any: ...
    @data.setter
    def data(self, value: Any) -> None: ...
    @property
    def dq(self) -> np.ndarray: ...
    @dq.setter
    def dq(self, value: np.ndarray) -> None: ...

class SuperbiasRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...
    @property
    def dq(self) -> np.ndarray: ...
    @dq.setter
    def dq(self, value: np.ndarray) -> None: ...
    @property
    def err(self) -> np.ndarray: ...
    @err.setter
    def err(self, value: np.ndarray) -> None: ...

class WfiImgPhotomRef(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def phot_table(self) -> dict: ...
    @phot_table.setter
    def phot_table(self, value: dict) -> None: ...

class Associations(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def asn_id(self) -> str: ...
    @asn_id.setter
    def asn_id(self, value: str) -> None: ...
    @property
    def asn_pool(self) -> str: ...
    @asn_pool.setter
    def asn_pool(self, value: str) -> None: ...
    @property
    def asn_type(self) -> str: ...
    @asn_type.setter
    def asn_type(self, value: str) -> None: ...
    @property
    def asn_rule(self) -> str: ...
    @asn_rule.setter
    def asn_rule(self, value: str) -> None: ...
    @property
    def version_id(self) -> str: ...
    @version_id.setter
    def version_id(self, value: str) -> None: ...
    @property
    def code_version(self) -> str: ...
    @code_version.setter
    def code_version(self, value: str) -> None: ...
    @property
    def degraded_status(self) -> str: ...
    @degraded_status.setter
    def degraded_status(self, value: str) -> None: ...
    @property
    def program(self) -> int: ...
    @program.setter
    def program(self, value: int) -> None: ...
    @property
    def target(self) -> int: ...
    @target.setter
    def target(self, value: int) -> None: ...
    @property
    def constraints(self) -> str: ...
    @constraints.setter
    def constraints(self, value: str) -> None: ...
    @property
    def products(self) -> list: ...
    @products.setter
    def products(self, value: list) -> None: ...

class RefFile(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def crds(self) -> dict: ...
    @crds.setter
    def crds(self, value: dict) -> None: ...
    @property
    def refpix(self) -> str: ...
    @refpix.setter
    def refpix(self, value: str) -> None: ...
    @property
    def dark(self) -> str: ...
    @dark.setter
    def dark(self, value: str) -> None: ...
    @property
    def distortion(self) -> str: ...
    @distortion.setter
    def distortion(self, value: str) -> None: ...
    @property
    def mask(self) -> str: ...
    @mask.setter
    def mask(self, value: str) -> None: ...
    @property
    def flat(self) -> str: ...
    @flat.setter
    def flat(self, value: str) -> None: ...
    @property
    def gain(self) -> str: ...
    @gain.setter
    def gain(self, value: str) -> None: ...
    @property
    def readnoise(self) -> str: ...
    @readnoise.setter
    def readnoise(self, value: str) -> None: ...
    @property
    def linearity(self) -> str: ...
    @linearity.setter
    def linearity(self, value: str) -> None: ...
    @property
    def photom(self) -> str: ...
    @photom.setter
    def photom(self, value: str) -> None: ...
    @property
    def area(self) -> str: ...
    @area.setter
    def area(self, value: str) -> None: ...
    @property
    def saturation(self) -> str: ...
    @saturation.setter
    def saturation(self, value: str) -> None: ...

class SourceCatalog(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def source_catalog(self) -> Any: ...
    @source_catalog.setter
    def source_catalog(self, value: Any) -> None: ...

class SegmentationMap(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...

class MosaicSourceCatalog(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def source_catalog(self) -> Any: ...
    @source_catalog.setter
    def source_catalog(self, value: Any) -> None: ...

class MosaicSegmentationMap(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...

class Fps(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> Any: ...
    @data.setter
    def data(self, value: Any) -> None: ...
    @property
    def amp33(self) -> Any: ...
    @amp33.setter
    def amp33(self, value: Any) -> None: ...
    @property
    def amp33_reset_reads(self) -> Any: ...
    @amp33_reset_reads.setter
    def amp33_reset_reads(self, value: Any) -> None: ...
    @property
    def amp33_reference_read(self) -> Any: ...
    @amp33_reference_read.setter
    def amp33_reference_read(self, value: Any) -> None: ...
    @property
    def guidewindow(self) -> Any: ...
    @guidewindow.setter
    def guidewindow(self, value: Any) -> None: ...
    @property
    def reference_read(self) -> Any: ...
    @reference_read.setter
    def reference_read(self, value: Any) -> None: ...
    @property
    def reset_reads(self) -> Any: ...
    @reset_reads.setter
    def reset_reads(self, value: Any) -> None: ...

class FpsCalStep(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def assign_wcs(self) -> str: ...
    @assign_wcs.setter
    def assign_wcs(self, value: str) -> None: ...
    @property
    def flat_field(self) -> str: ...
    @flat_field.setter
    def flat_field(self, value: str) -> None: ...
    @property
    def dark(self) -> str: ...
    @dark.setter
    def dark(self, value: str) -> None: ...
    @property
    def dq_init(self) -> str: ...
    @dq_init.setter
    def dq_init(self, value: str) -> None: ...
    @property
    def flux(self) -> str: ...
    @flux.setter
    def flux(self, value: str) -> None: ...
    @property
    def jump(self) -> str: ...
    @jump.setter
    def jump(self, value: str) -> None: ...
    @property
    def linearity(self) -> str: ...
    @linearity.setter
    def linearity(self, value: str) -> None: ...
    @property
    def photom(self) -> str: ...
    @photom.setter
    def photom(self, value: str) -> None: ...
    @property
    def source_detection(self) -> str: ...
    @source_detection.setter
    def source_detection(self, value: str) -> None: ...
    @property
    def ramp_fit(self) -> str: ...
    @ramp_fit.setter
    def ramp_fit(self, value: str) -> None: ...
    @property
    def refpix(self) -> str: ...
    @refpix.setter
    def refpix(self, value: str) -> None: ...
    @property
    def saturation(self) -> str: ...
    @saturation.setter
    def saturation(self, value: str) -> None: ...
    @property
    def outlier_detection(self) -> str: ...
    @outlier_detection.setter
    def outlier_detection(self, value: str) -> None: ...
    @property
    def tweakreg(self) -> str: ...
    @tweakreg.setter
    def tweakreg(self, value: str) -> None: ...
    @property
    def skymatch(self) -> str: ...
    @skymatch.setter
    def skymatch(self, value: str) -> None: ...

class FpsExposure(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def type(self) -> Any: ...
    @type.setter
    def type(self, value: Any) -> None: ...
    @property
    def start_time(self) -> astropy.time.core.Time: ...
    @start_time.setter
    def start_time(self, value: astropy.time.core.Time) -> None: ...
    @property
    def ngroups(self) -> int: ...
    @ngroups.setter
    def ngroups(self, value: int) -> None: ...
    @property
    def nframes(self) -> int: ...
    @nframes.setter
    def nframes(self, value: int) -> None: ...
    @property
    def data_problem(self) -> bool: ...
    @data_problem.setter
    def data_problem(self, value: bool) -> None: ...
    @property
    def frame_divisor(self) -> int: ...
    @frame_divisor.setter
    def frame_divisor(self, value: int) -> None: ...
    @property
    def groupgap(self) -> int: ...
    @groupgap.setter
    def groupgap(self, value: int) -> None: ...
    @property
    def frame_time(self) -> float: ...
    @frame_time.setter
    def frame_time(self, value: float) -> None: ...
    @property
    def group_time(self) -> float: ...
    @group_time.setter
    def group_time(self, value: float) -> None: ...
    @property
    def exposure_time(self) -> float: ...
    @exposure_time.setter
    def exposure_time(self, value: float) -> None: ...
    @property
    def ma_table_name(self) -> str: ...
    @ma_table_name.setter
    def ma_table_name(self, value: str) -> None: ...
    @property
    def ma_table_number(self) -> int: ...
    @ma_table_number.setter
    def ma_table_number(self, value: int) -> None: ...
    @property
    def read_pattern(self) -> list: ...
    @read_pattern.setter
    def read_pattern(self, value: list) -> None: ...

class FpsGroundtest(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def test_name(self) -> str: ...
    @test_name.setter
    def test_name(self, value: str) -> None: ...
    @property
    def test_phase(self) -> str: ...
    @test_phase.setter
    def test_phase(self, value: str) -> None: ...
    @property
    def test_environment(self) -> str: ...
    @test_environment.setter
    def test_environment(self, value: str) -> None: ...
    @property
    def test_script(self) -> str: ...
    @test_script.setter
    def test_script(self, value: str) -> None: ...
    @property
    def product_date(self) -> astropy.time.core.Time: ...
    @product_date.setter
    def product_date(self, value: astropy.time.core.Time) -> None: ...
    @property
    def product_version(self) -> str: ...
    @product_version.setter
    def product_version(self, value: str) -> None: ...
    @property
    def conversion_date(self) -> astropy.time.core.Time: ...
    @conversion_date.setter
    def conversion_date(self, value: astropy.time.core.Time) -> None: ...
    @property
    def conversion_version(self) -> str: ...
    @conversion_version.setter
    def conversion_version(self, value: str) -> None: ...
    @property
    def filename_pnt5(self) -> str: ...
    @filename_pnt5.setter
    def filename_pnt5(self, value: str) -> None: ...
    @property
    def filepath_level_pnt5(self) -> str: ...
    @filepath_level_pnt5.setter
    def filepath_level_pnt5(self, value: str) -> None: ...
    @property
    def filename_l1a(self) -> str: ...
    @filename_l1a.setter
    def filename_l1a(self, value: str) -> None: ...
    @property
    def detector_id(self) -> str: ...
    @detector_id.setter
    def detector_id(self, value: str) -> None: ...
    @property
    def detector_temp(self) -> float: ...
    @detector_temp.setter
    def detector_temp(self, value: float) -> None: ...
    @property
    def frames_temp(self) -> np.ndarray: ...
    @frames_temp.setter
    def frames_temp(self, value: np.ndarray) -> None: ...
    @property
    def ota_temp(self) -> float: ...
    @ota_temp.setter
    def ota_temp(self, value: float) -> None: ...
    @property
    def rcs_on(self) -> bool: ...
    @rcs_on.setter
    def rcs_on(self, value: bool) -> None: ...
    @property
    def readout_col_num(self) -> int: ...
    @readout_col_num.setter
    def readout_col_num(self, value: int) -> None: ...
    @property
    def detector_pixel_size(self) -> Any: ...
    @detector_pixel_size.setter
    def detector_pixel_size(self, value: Any) -> None: ...
    @property
    def sensor_error(self) -> np.ndarray: ...
    @sensor_error.setter
    def sensor_error(self, value: np.ndarray) -> None: ...

class FpsGuidestar(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def gw_id(self) -> str: ...
    @gw_id.setter
    def gw_id(self, value: str) -> None: ...
    @property
    def gw_fgs_mode(self) -> Any: ...
    @gw_fgs_mode.setter
    def gw_fgs_mode(self, value: Any) -> None: ...
    @property
    def data_start(self) -> float: ...
    @data_start.setter
    def data_start(self, value: float) -> None: ...
    @property
    def data_end(self) -> float: ...
    @data_end.setter
    def data_end(self, value: float) -> None: ...
    @property
    def gw_window_xstart(self) -> int: ...
    @gw_window_xstart.setter
    def gw_window_xstart(self, value: int) -> None: ...
    @property
    def gw_window_ystart(self) -> int: ...
    @gw_window_ystart.setter
    def gw_window_ystart(self, value: int) -> None: ...
    @property
    def gw_window_xstop(self) -> int: ...
    @gw_window_xstop.setter
    def gw_window_xstop(self, value: int) -> None: ...
    @property
    def gw_window_ystop(self) -> int: ...
    @gw_window_ystop.setter
    def gw_window_ystop(self, value: int) -> None: ...
    @property
    def gw_window_xsize(self) -> int: ...
    @gw_window_xsize.setter
    def gw_window_xsize(self, value: int) -> None: ...
    @property
    def gw_window_ysize(self) -> int: ...
    @gw_window_ysize.setter
    def gw_window_ysize(self, value: int) -> None: ...

class FpsStatistics(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def mean_counts_per_sec(self) -> Any: ...
    @mean_counts_per_sec.setter
    def mean_counts_per_sec(self, value: Any) -> None: ...
    @property
    def median_counts_per_sec(self) -> Any: ...
    @median_counts_per_sec.setter
    def median_counts_per_sec(self, value: Any) -> None: ...
    @property
    def max_counts(self) -> Any: ...
    @max_counts.setter
    def max_counts(self, value: Any) -> None: ...
    @property
    def min_counts(self) -> Any: ...
    @min_counts.setter
    def min_counts(self, value: Any) -> None: ...

class FpsRefFile(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def crds(self) -> dict: ...
    @crds.setter
    def crds(self, value: dict) -> None: ...
    @property
    def dark(self) -> str: ...
    @dark.setter
    def dark(self, value: str) -> None: ...
    @property
    def distortion(self) -> str: ...
    @distortion.setter
    def distortion(self, value: str) -> None: ...
    @property
    def mask(self) -> str: ...
    @mask.setter
    def mask(self, value: str) -> None: ...
    @property
    def flat(self) -> str: ...
    @flat.setter
    def flat(self, value: str) -> None: ...
    @property
    def gain(self) -> str: ...
    @gain.setter
    def gain(self, value: str) -> None: ...
    @property
    def readnoise(self) -> str: ...
    @readnoise.setter
    def readnoise(self, value: str) -> None: ...
    @property
    def linearity(self) -> str: ...
    @linearity.setter
    def linearity(self, value: str) -> None: ...
    @property
    def photom(self) -> str: ...
    @photom.setter
    def photom(self, value: str) -> None: ...
    @property
    def area(self) -> str: ...
    @area.setter
    def area(self, value: str) -> None: ...
    @property
    def saturation(self) -> str: ...
    @saturation.setter
    def saturation(self, value: str) -> None: ...

class FpsWfiMode(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def detector(self) -> Any: ...
    @detector.setter
    def detector(self, value: Any) -> None: ...
    @property
    def optical_element(self) -> Any: ...
    @optical_element.setter
    def optical_element(self, value: Any) -> None: ...

class Tvac(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> Any: ...
    @data.setter
    def data(self, value: Any) -> None: ...
    @property
    def amp33(self) -> Any: ...
    @amp33.setter
    def amp33(self, value: Any) -> None: ...
    @property
    def amp33_reset_reads(self) -> Any: ...
    @amp33_reset_reads.setter
    def amp33_reset_reads(self, value: Any) -> None: ...
    @property
    def amp33_reference_read(self) -> Any: ...
    @amp33_reference_read.setter
    def amp33_reference_read(self, value: Any) -> None: ...
    @property
    def guidewindow(self) -> Any: ...
    @guidewindow.setter
    def guidewindow(self, value: Any) -> None: ...
    @property
    def reference_read(self) -> Any: ...
    @reference_read.setter
    def reference_read(self, value: Any) -> None: ...
    @property
    def reset_reads(self) -> Any: ...
    @reset_reads.setter
    def reset_reads(self, value: Any) -> None: ...

class TvacCalStep(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def assign_wcs(self) -> str: ...
    @assign_wcs.setter
    def assign_wcs(self, value: str) -> None: ...
    @property
    def flat_field(self) -> str: ...
    @flat_field.setter
    def flat_field(self, value: str) -> None: ...
    @property
    def dark(self) -> str: ...
    @dark.setter
    def dark(self, value: str) -> None: ...
    @property
    def dq_init(self) -> str: ...
    @dq_init.setter
    def dq_init(self, value: str) -> None: ...
    @property
    def flux(self) -> str: ...
    @flux.setter
    def flux(self, value: str) -> None: ...
    @property
    def jump(self) -> str: ...
    @jump.setter
    def jump(self, value: str) -> None: ...
    @property
    def linearity(self) -> str: ...
    @linearity.setter
    def linearity(self, value: str) -> None: ...
    @property
    def photom(self) -> str: ...
    @photom.setter
    def photom(self, value: str) -> None: ...
    @property
    def source_detection(self) -> str: ...
    @source_detection.setter
    def source_detection(self, value: str) -> None: ...
    @property
    def ramp_fit(self) -> str: ...
    @ramp_fit.setter
    def ramp_fit(self, value: str) -> None: ...
    @property
    def refpix(self) -> str: ...
    @refpix.setter
    def refpix(self, value: str) -> None: ...
    @property
    def saturation(self) -> str: ...
    @saturation.setter
    def saturation(self, value: str) -> None: ...
    @property
    def outlier_detection(self) -> str: ...
    @outlier_detection.setter
    def outlier_detection(self, value: str) -> None: ...
    @property
    def tweakreg(self) -> str: ...
    @tweakreg.setter
    def tweakreg(self, value: str) -> None: ...
    @property
    def skymatch(self) -> str: ...
    @skymatch.setter
    def skymatch(self, value: str) -> None: ...

class TvacExposure(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def type(self) -> Any: ...
    @type.setter
    def type(self, value: Any) -> None: ...
    @property
    def start_time(self) -> astropy.time.core.Time: ...
    @start_time.setter
    def start_time(self, value: astropy.time.core.Time) -> None: ...
    @property
    def ngroups(self) -> int: ...
    @ngroups.setter
    def ngroups(self, value: int) -> None: ...
    @property
    def nframes(self) -> int: ...
    @nframes.setter
    def nframes(self, value: int) -> None: ...
    @property
    def data_problem(self) -> bool: ...
    @data_problem.setter
    def data_problem(self, value: bool) -> None: ...
    @property
    def frame_divisor(self) -> int: ...
    @frame_divisor.setter
    def frame_divisor(self, value: int) -> None: ...
    @property
    def groupgap(self) -> int: ...
    @groupgap.setter
    def groupgap(self, value: int) -> None: ...
    @property
    def frame_time(self) -> float: ...
    @frame_time.setter
    def frame_time(self, value: float) -> None: ...
    @property
    def group_time(self) -> float: ...
    @group_time.setter
    def group_time(self, value: float) -> None: ...
    @property
    def exposure_time(self) -> float: ...
    @exposure_time.setter
    def exposure_time(self, value: float) -> None: ...
    @property
    def ma_table_name(self) -> str: ...
    @ma_table_name.setter
    def ma_table_name(self, value: str) -> None: ...
    @property
    def ma_table_number(self) -> int: ...
    @ma_table_number.setter
    def ma_table_number(self, value: int) -> None: ...
    @property
    def read_pattern(self) -> list: ...
    @read_pattern.setter
    def read_pattern(self, value: list) -> None: ...

class TvacGroundtest(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def test_name(self) -> str: ...
    @test_name.setter
    def test_name(self, value: str) -> None: ...
    @property
    def test_phase(self) -> str: ...
    @test_phase.setter
    def test_phase(self, value: str) -> None: ...
    @property
    def test_environment(self) -> str: ...
    @test_environment.setter
    def test_environment(self, value: str) -> None: ...
    @property
    def test_script(self) -> str: ...
    @test_script.setter
    def test_script(self, value: str) -> None: ...
    @property
    def product_date(self) -> astropy.time.core.Time: ...
    @product_date.setter
    def product_date(self, value: astropy.time.core.Time) -> None: ...
    @property
    def product_version(self) -> str: ...
    @product_version.setter
    def product_version(self, value: str) -> None: ...
    @property
    def conversion_date(self) -> astropy.time.core.Time: ...
    @conversion_date.setter
    def conversion_date(self, value: astropy.time.core.Time) -> None: ...
    @property
    def conversion_version(self) -> str: ...
    @conversion_version.setter
    def conversion_version(self, value: str) -> None: ...
    @property
    def filename_pnt5(self) -> str: ...
    @filename_pnt5.setter
    def filename_pnt5(self, value: str) -> None: ...
    @property
    def filepath_level_pnt5(self) -> str: ...
    @filepath_level_pnt5.setter
    def filepath_level_pnt5(self, value: str) -> None: ...
    @property
    def filename_l1a(self) -> str: ...
    @filename_l1a.setter
    def filename_l1a(self, value: str) -> None: ...
    @property
    def detector_id(self) -> str: ...
    @detector_id.setter
    def detector_id(self, value: str) -> None: ...
    @property
    def detector_temp(self) -> float: ...
    @detector_temp.setter
    def detector_temp(self, value: float) -> None: ...
    @property
    def frames_temp(self) -> np.ndarray: ...
    @frames_temp.setter
    def frames_temp(self, value: np.ndarray) -> None: ...
    @property
    def ota_temp(self) -> float: ...
    @ota_temp.setter
    def ota_temp(self, value: float) -> None: ...
    @property
    def rcs_on(self) -> bool: ...
    @rcs_on.setter
    def rcs_on(self, value: bool) -> None: ...
    @property
    def readout_col_num(self) -> int: ...
    @readout_col_num.setter
    def readout_col_num(self, value: int) -> None: ...
    @property
    def detector_pixel_size(self) -> Any: ...
    @detector_pixel_size.setter
    def detector_pixel_size(self, value: Any) -> None: ...
    @property
    def sensor_error(self) -> np.ndarray: ...
    @sensor_error.setter
    def sensor_error(self, value: np.ndarray) -> None: ...
    @property
    def activity_number(self) -> int: ...
    @activity_number.setter
    def activity_number(self, value: int) -> None: ...
    @property
    def led_bank1_band_number_on(self) -> list: ...
    @led_bank1_band_number_on.setter
    def led_bank1_band_number_on(self, value: list) -> None: ...
    @property
    def led_bank2_bank1_number_on(self) -> list: ...
    @led_bank2_bank1_number_on.setter
    def led_bank2_bank1_number_on(self, value: list) -> None: ...
    @property
    def led_bank1_approx_wlen(self) -> Any: ...
    @led_bank1_approx_wlen.setter
    def led_bank1_approx_wlen(self, value: Any) -> None: ...
    @property
    def led_bank2_approx_wlen(self) -> Any: ...
    @led_bank2_approx_wlen.setter
    def led_bank2_approx_wlen(self, value: Any) -> None: ...
    @property
    def srcs_pd_voltage(self) -> float: ...
    @srcs_pd_voltage.setter
    def srcs_pd_voltage(self, value: float) -> None: ...
    @property
    def srcs_led_flux(self) -> float: ...
    @srcs_led_flux.setter
    def srcs_led_flux(self, value: float) -> None: ...
    @property
    def wfi_mce_srcs_bank1_led_i(self) -> Any: ...
    @wfi_mce_srcs_bank1_led_i.setter
    def wfi_mce_srcs_bank1_led_i(self, value: Any) -> None: ...
    @property
    def wfi_mce_srcs_bank1_led_range(self) -> str: ...
    @wfi_mce_srcs_bank1_led_range.setter
    def wfi_mce_srcs_bank1_led_range(self, value: str) -> None: ...
    @property
    def wfi_mce_srcs_bank2_led_i(self) -> Any: ...
    @wfi_mce_srcs_bank2_led_i.setter
    def wfi_mce_srcs_bank2_led_i(self, value: Any) -> None: ...
    @property
    def wfi_mce_srcs_bank2_led_range(self) -> str: ...
    @wfi_mce_srcs_bank2_led_range.setter
    def wfi_mce_srcs_bank2_led_range(self, value: str) -> None: ...
    @property
    def srcs_led_current(self) -> float: ...
    @srcs_led_current.setter
    def srcs_led_current(self, value: float) -> None: ...
    @property
    def wfi_opt_targettype(self) -> str: ...
    @wfi_opt_targettype.setter
    def wfi_opt_targettype(self, value: str) -> None: ...
    @property
    def analysis_tag(self) -> str: ...
    @analysis_tag.setter
    def analysis_tag(self, value: str) -> None: ...
    @property
    def gsorc_pose_mode(self) -> str: ...
    @gsorc_pose_mode.setter
    def gsorc_pose_mode(self, value: str) -> None: ...
    @property
    def gsorc_pose_target(self) -> str: ...
    @gsorc_pose_target.setter
    def gsorc_pose_target(self, value: str) -> None: ...
    @property
    def gsorc_sds_active_atten(self) -> float: ...
    @gsorc_sds_active_atten.setter
    def gsorc_sds_active_atten(self, value: float) -> None: ...
    @property
    def gsorc_sds_lltfir_wave(self) -> float: ...
    @gsorc_sds_lltfir_wave.setter
    def gsorc_sds_lltfir_wave(self, value: float) -> None: ...
    @property
    def gsorc_sds_sorc_on(self) -> bool: ...
    @gsorc_sds_sorc_on.setter
    def gsorc_sds_sorc_on(self, value: bool) -> None: ...
    @property
    def gsorc_sds_sorc_wlen(self) -> float: ...
    @gsorc_sds_sorc_wlen.setter
    def gsorc_sds_sorc_wlen(self, value: float) -> None: ...
    @property
    def gsorc_sds_active_source(self) -> str: ...
    @gsorc_sds_active_source.setter
    def gsorc_sds_active_source(self, value: str) -> None: ...
    @property
    def gsorc_sds_dq_pulse(self) -> str: ...
    @gsorc_sds_dq_pulse.setter
    def gsorc_sds_dq_pulse(self, value: str) -> None: ...
    @property
    def gsorc_sds_daq_pw(self) -> Any: ...
    @gsorc_sds_daq_pw.setter
    def gsorc_sds_daq_pw(self, value: Any) -> None: ...
    @property
    def gsorc_heater1_setpt(self) -> float: ...
    @gsorc_heater1_setpt.setter
    def gsorc_heater1_setpt(self, value: float) -> None: ...
    @property
    def wfi_otp_wfi_ewa(self) -> str: ...
    @wfi_otp_wfi_ewa.setter
    def wfi_otp_wfi_ewa(self, value: str) -> None: ...
    @property
    def sca_temp(self) -> Any: ...
    @sca_temp.setter
    def sca_temp(self, value: Any) -> None: ...
    @property
    def mpa_temp(self) -> Any: ...
    @mpa_temp.setter
    def mpa_temp(self, value: Any) -> None: ...
    @property
    def ewa_temp(self) -> Any: ...
    @ewa_temp.setter
    def ewa_temp(self, value: Any) -> None: ...
    @property
    def ewta_outer_heater_temp(self) -> Any: ...
    @ewta_outer_heater_temp.setter
    def ewta_outer_heater_temp(self, value: Any) -> None: ...
    @property
    def ewta_inner_heater_temp(self) -> Any: ...
    @ewta_inner_heater_temp.setter
    def ewta_inner_heater_temp(self, value: Any) -> None: ...
    @property
    def coba_temp_near_ewta(self) -> Any: ...
    @coba_temp_near_ewta.setter
    def coba_temp_near_ewta(self, value: Any) -> None: ...
    @property
    def scea_temp(self) -> Any: ...
    @scea_temp.setter
    def scea_temp(self, value: Any) -> None: ...
    @property
    def wfi_sce_1_vbiasgate_v(self) -> Any: ...
    @wfi_sce_1_vbiasgate_v.setter
    def wfi_sce_1_vbiasgate_v(self, value: Any) -> None: ...
    @property
    def wfi_sce_1_vbiaspwr_i(self) -> Any: ...
    @wfi_sce_1_vbiaspwr_i.setter
    def wfi_sce_1_vbiaspwr_i(self, value: Any) -> None: ...
    @property
    def wfi_sce_1_vbiaspwr_v(self) -> Any: ...
    @wfi_sce_1_vbiaspwr_v.setter
    def wfi_sce_1_vbiaspwr_v(self, value: Any) -> None: ...
    @property
    def wfi_sce_1_vreset_v(self) -> Any: ...
    @wfi_sce_1_vreset_v.setter
    def wfi_sce_1_vreset_v(self, value: Any) -> None: ...
    @property
    def wfi_sce_1_vreset_i(self) -> Any: ...
    @wfi_sce_1_vreset_i.setter
    def wfi_sce_1_vreset_i(self, value: Any) -> None: ...
    @property
    def wfi_mcu_a_offs_csense_fpssen(self) -> Any: ...
    @wfi_mcu_a_offs_csense_fpssen.setter
    def wfi_mcu_a_offs_csense_fpssen(self, value: Any) -> None: ...

class TvacGuidestar(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def gw_id(self) -> str: ...
    @gw_id.setter
    def gw_id(self, value: str) -> None: ...
    @property
    def gw_fgs_mode(self) -> Any: ...
    @gw_fgs_mode.setter
    def gw_fgs_mode(self, value: Any) -> None: ...
    @property
    def data_start(self) -> float: ...
    @data_start.setter
    def data_start(self, value: float) -> None: ...
    @property
    def data_end(self) -> float: ...
    @data_end.setter
    def data_end(self, value: float) -> None: ...
    @property
    def gw_window_xstart(self) -> int: ...
    @gw_window_xstart.setter
    def gw_window_xstart(self, value: int) -> None: ...
    @property
    def gw_window_ystart(self) -> int: ...
    @gw_window_ystart.setter
    def gw_window_ystart(self, value: int) -> None: ...
    @property
    def gw_window_xstop(self) -> int: ...
    @gw_window_xstop.setter
    def gw_window_xstop(self, value: int) -> None: ...
    @property
    def gw_window_ystop(self) -> int: ...
    @gw_window_ystop.setter
    def gw_window_ystop(self, value: int) -> None: ...
    @property
    def gw_window_xsize(self) -> int: ...
    @gw_window_xsize.setter
    def gw_window_xsize(self, value: int) -> None: ...
    @property
    def gw_window_ysize(self) -> int: ...
    @gw_window_ysize.setter
    def gw_window_ysize(self, value: int) -> None: ...

class TvacStatistics(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def mean_counts_per_sec(self) -> Any: ...
    @mean_counts_per_sec.setter
    def mean_counts_per_sec(self, value: Any) -> None: ...
    @property
    def median_counts_per_sec(self) -> Any: ...
    @median_counts_per_sec.setter
    def median_counts_per_sec(self, value: Any) -> None: ...
    @property
    def max_counts(self) -> Any: ...
    @max_counts.setter
    def max_counts(self, value: Any) -> None: ...
    @property
    def min_counts(self) -> Any: ...
    @min_counts.setter
    def min_counts(self, value: Any) -> None: ...

class TvacRefFile(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def crds(self) -> dict: ...
    @crds.setter
    def crds(self, value: dict) -> None: ...
    @property
    def dark(self) -> str: ...
    @dark.setter
    def dark(self, value: str) -> None: ...
    @property
    def distortion(self) -> str: ...
    @distortion.setter
    def distortion(self, value: str) -> None: ...
    @property
    def mask(self) -> str: ...
    @mask.setter
    def mask(self, value: str) -> None: ...
    @property
    def flat(self) -> str: ...
    @flat.setter
    def flat(self, value: str) -> None: ...
    @property
    def gain(self) -> str: ...
    @gain.setter
    def gain(self, value: str) -> None: ...
    @property
    def readnoise(self) -> str: ...
    @readnoise.setter
    def readnoise(self, value: str) -> None: ...
    @property
    def linearity(self) -> str: ...
    @linearity.setter
    def linearity(self, value: str) -> None: ...
    @property
    def photom(self) -> str: ...
    @photom.setter
    def photom(self, value: str) -> None: ...
    @property
    def area(self) -> str: ...
    @area.setter
    def area(self, value: str) -> None: ...
    @property
    def saturation(self) -> str: ...
    @saturation.setter
    def saturation(self, value: str) -> None: ...

class TvacWfiMode(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def detector(self) -> Any: ...
    @detector.setter
    def detector(self, value: Any) -> None: ...
    @property
    def optical_element(self) -> Any: ...
    @optical_element.setter
    def optical_element(self, value: Any) -> None: ...

class MsosStack(roman_datamodels.stnode._tagged.TaggedObjectNode):
    @property
    def meta(self) -> Any: ...
    @meta.setter
    def meta(self, value: Any) -> None: ...
    @property
    def data(self) -> Any: ...
    @data.setter
    def data(self, value: Any) -> None: ...
    @property
    def uncertainty(self) -> Any: ...
    @uncertainty.setter
    def uncertainty(self, value: Any) -> None: ...
    @property
    def mask(self) -> Any: ...
    @mask.setter
    def mask(self, value: Any) -> None: ...
    @property
    def coverage(self) -> Any: ...
    @coverage.setter
    def coverage(self, value: Any) -> None: ...

class CalLogs(roman_datamodels.stnode._tagged.TaggedListNode): ...
class CalibrationSoftwareVersion(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class Filename(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class FileDate(astropy.time.core.Time, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class ModelType(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class Origin(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class PrdSoftwareVersion(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class SdfSoftwareVersion(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class Telescope(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class FpsCalibrationSoftwareVersion(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class FpsFilename(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class FpsFileDate(astropy.time.core.Time, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class FpsModelType(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class FpsOrigin(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class FpsPrdSoftwareVersion(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class FpsSdfSoftwareVersion(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class FpsTelescope(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class TvacCalibrationSoftwareVersion(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class TvacFilename(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class TvacFileDate(astropy.time.core.Time, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class TvacModelType(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class TvacOrigin(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class TvacPrdSoftwareVersion(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class TvacSdfSoftwareVersion(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
class TvacTelescope(str, roman_datamodels.stnode._tagged.TaggedScalarNode): ...
